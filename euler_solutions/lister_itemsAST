import ast
import collections
import sqlite3
import os

# -------------------------------
# CONSTANTES DE CONFIGURATION
# -------------------------------

FOLDER = 'euler_solutions'    # Dossier contenant les fichiers Python à analyser
DB_PATH = "Nayuki_AST.db"     # Nom de la base SQLite à utiliser/créer

# Liste d’éléments AST à surveiller (à personnaliser selon ton besoin)
ITEMS_AST = [
    ast.Raise, ast.Assert, ast.With, ast.AsyncWith, ast.ClassDef, ast.Yield, ast.YieldFrom,
    ast.AsyncFunctionDef, ast.Await, ast.AsyncFor, ast.Try, ast.Break, ast.Continue, ast.ExceptHandler,
    ast.Global, ast.Nonlocal, ast.Lambda, ast.Dict, ast.FunctionDef, 'nested_funcDef', ast.Return, ast.If,
    'nested_if', 'If_elif', 'If_else', ast.While, 'nested_while', ast.For, 'nested_for', ast.Import,
    ast.ImportFrom, ast.Assign, ast.AnnAssign, ast.AugAssign, ast.Delete,
    ast.BoolOp, ast.BinOp, ast.UnaryOp, ast.Compare, ast.Call, ast.Name, ast.Str, ast.Num, ast.List,
    ast.ListComp, ast.DictComp, ast.SetComp, ast.Tuple, ast.Set, ast.Attribute, ast.Subscript, ast.Expr,
    ast.Bytes, ast.Constant, ast.Starred, ast.Slice
]

# Pour SQL : extraire le nom textuel de chaque feature
FEATURES = [item if isinstance(item, str) else item.__name__ for item in ITEMS_AST]

# Liste exhaustive de builtins à surveiller (extrait de la doc Python)
BUILTINS = [
    'abs', 'aiter', 'all', 'anext', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable',
    'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec',
    'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input',
    'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next',
    'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr',
    'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip', '__import__'
]

MODULES_TO_TRACK = [
    'math', 'random', 'turtle', 'matplotlib.pyplot', 'numpy',
    'operator', 'os', 'sys', 're', 'datetime'
]
SPECIAL_MATH_FUNCS = {'sqrt', 'pow'}

# -------------------------------
# VISITEUR AST POUR L’ANALYSE
# -------------------------------

class ModularFeatureCounter(ast.NodeVisitor):
    """
    Visiteur AST modulaire : 
    - compte les éléments syntaxiques (cf ITEMS_AST),
    - classe les appels à fonctions (builtins, modules, user, opérateurs).
    """
    def __init__(self, items_ast, builtins_list, modules_to_track, special_math_funcs):
        self.items_ast = items_ast
        self.builtins = set(builtins_list)
        self.modules_to_track = modules_to_track
        self.special_math_funcs = special_math_funcs
        self.counts = collections.Counter()
        self.nesting = collections.defaultdict(int)
        self.max_nesting = collections.defaultdict(int)
        self.user_func_names = set()
        self.aliases = {}
        self.imported_funcs = {}
        self.imported_modules = set()

    # Gestion des imports, des alias, des from-import
    def visit_Import(self, node):
        for alias in node.names:
            modname = alias.name.split('.')[0]
            asname = alias.asname if alias.asname else modname
            self.aliases[asname] = modname
            self.imported_modules.add(modname)
        self.counts['Import'] += 1

    def visit_ImportFrom(self, node):
        if node.module:
            modname = node.module.split('.')[0]
            for alias in node.names:
                asname = alias.asname if alias.asname else alias.name
                self.imported_funcs[asname] = modname
            self.imported_modules.add(modname)
        self.counts['ImportFrom'] += 1

    # Détection des fonctions et de leur imbrication
    def visit_FunctionDef(self, node):
        self.counts['FunctionDef'] += 1
        self.user_func_names.add(node.name)
        self.nesting['func'] += 1
        if self.nesting['func'] > 1:
            self.counts['nested_funcDef'] += 1
        self.generic_visit(node)
        self.nesting['func'] -= 1

    def visit_If(self, node):
        self.counts['If'] += 1
        for idx, child in enumerate(node.orelse):
            if isinstance(child, ast.If):
                self.counts['If_elif'] += 1
                self.visit_If(child)
            else:
                self.counts['If_else'] += 1
        self.nesting['if'] += 1
        self.max_nesting['if'] = max(self.max_nesting['if'], self.nesting['if'])
        if self.nesting['if'] > 1:
            self.counts['nested_if'] += 1
        for stmt in node.body:
            self.visit(stmt)
        self.nesting['if'] -= 1

    def visit_For(self, node):
        self.counts['For'] += 1
        self.nesting['for'] += 1
        self.max_nesting['for'] = max(self.max_nesting['for'], self.nesting['for'])
        if self.nesting['for'] > 1:
            self.counts['nested_for'] += 1
        self.generic_visit(node)
        self.nesting['for'] -= 1

    def visit_While(self, node):
        self.counts['While'] += 1
        self.nesting['while'] += 1
        self.max_nesting['while'] = max(self.max_nesting['while'], self.nesting['while'])
        if self.nesting['while'] > 1:
            self.counts['nested_while'] += 1
        self.generic_visit(node)
        self.nesting['while'] -= 1

    def visit_Call(self, node):
        self.counts['Call'] += 1
        func = node.func
        func_name = None
        module_name = None
        # Cas module.func() ou alias.func()
        if isinstance(func, ast.Attribute):
            func_name = func.attr
            if isinstance(func.value, ast.Name):
                candidate_mod = func.value.id
                module_name = self.aliases.get(candidate_mod, candidate_mod)
            elif isinstance(func.value, ast.Attribute):
                # Pour matplotlib.pyplot.plot ou numpy.random.rand
                names = []
                val = func.value
                while isinstance(val, ast.Attribute):
                    names.append(val.attr)
                    val = val.value
                if isinstance(val, ast.Name):
                    names.append(val.id)
                names = list(reversed(names))
                module_name = '.'.join(names)
                if names and names[0] in self.aliases:
                    root_alias = self.aliases[names[0]]
                    module_name = '.'.join([root_alias] + names[1:])
        elif isinstance(func, ast.Name):
            func_name = func.id
            module_name = self.imported_funcs.get(func_name, None)

        # Classification fine
        if func_name in self.builtins:
            self.counts[f'call_{func_name}'] += 1
        elif func_name in self.user_func_names:
            self.counts['call_user_func'] += 1
        elif module_name == "operator":
            self.counts['call_operator'] += 1
        elif module_name == "math":
            if func_name in self.special_math_funcs:
                self.counts[f'call_math_{func_name}'] += 1
            else:
                self.counts['call_module_math'] += 1
        elif module_name in self.modules_to_track:
            colname = f'call_module_{module_name.replace(".", "_")}'
            self.counts[colname] += 1
        elif module_name and any(module_name.startswith(m) for m in self.modules_to_track):
            mkey = [m for m in self.modules_to_track if module_name.startswith(m)][0]
            colname = f'call_module_{mkey.replace(".", "_")}'
            self.counts[colname] += 1
        elif func_name:
            self.counts['call_user_func'] += 1
        else:
            self.counts['call_user_func'] += 1

        self.generic_visit(node)

    def generic_visit(self, node):
        for item in self.items_ast:
            if isinstance(item, str): continue
            if isinstance(node, item):
                self.counts[item.__name__] += 1
        super().generic_visit(node)

# -------------------------------
# CRÉATION DES TABLES
# -------------------------------

def create_db(db_path, features, builtins_list, modules_to_track, special_math_funcs):
    """Crée la table euler_analysis (globale) et la table snippets (snippets de fonctions)"""
    feature_cols = [f'"{f}" INT DEFAULT 0' for f in features]
    builtin_cols = [f"call_{b} INT DEFAULT 0" for b in builtins_list]
    math_cols = [f"call_math_{func} INT DEFAULT 0" for func in special_math_funcs]
    module_cols = [f"call_module_{mod.replace('.', '_')} INT DEFAULT 0" for mod in modules_to_track]
    extra_cols = ["call_operator INT DEFAULT 0", "call_user_func INT DEFAULT 0", "n_lines INT DEFAULT 0", "n_chars INT DEFAULT 0"]

    all_cols = feature_cols + builtin_cols + math_cols + module_cols + extra_cols

    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        # Table principale (une ligne par fichier)
        #DEBUG: print(">> Création table :", f"CREATE TABLE IF NOT EXISTS euler_analysis (id INTEGER PRIMARY KEY AUTOINCREMENT, filename TEXT, {', '.join(all_cols)} );")
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS euler_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filename TEXT,
                {', '.join(all_cols)}
            );
        """)
        # Table snippets (une ligne par fonction extraite)
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS snippets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                id_code_source INT,
                function_name TEXT,
                code TEXT,
                {', '.join(all_cols)}
            );
        """)
        conn.commit()

# -------------------------------
# ANALYSE D'UN FICHIER ENTIER
# -------------------------------

def analyze_code_file(filepath, items_ast, builtins_list, modules_to_track, special_math_funcs):
    """Analyse un fichier Python entier, retourne un dict de compteurs"""
    with open(filepath, encoding='utf-8') as f:
        code = f.read()
    try:
        tree = ast.parse(code)
    except Exception as e:
        print(f"Erreur parsing {filepath} : {e}")
        return None
    counter = ModularFeatureCounter(items_ast, builtins_list, modules_to_track, special_math_funcs)
    counter.visit(tree)
    counter.counts['n_lines'] = code.count('\n') + 1
    counter.counts['n_chars'] = len(code)
    # Initialise toutes les colonnes à 0 si absentes
    all_cols = [f for f in FEATURES] \
            + [f'call_{b}' for b in BUILTINS] \
            + [f'call_math_{func}' for func in SPECIAL_MATH_FUNCS] \
            + [f'call_module_{mod.replace(".", "_")}' for mod in MODULES_TO_TRACK] \
            + ['call_operator', 'call_user_func', 'n_lines', 'n_chars']
    for col in all_cols:
        if col not in counter.counts:
            counter.counts[col] = 0
    return counter.counts

def insert_analysis(filename, counts, db_path):
    """Insère une analyse globale dans la table euler_analysis"""
    columns = ['filename'] + list(counts.keys())
    # DEBUG des mots réservés SQL
    columns_sql = ['filename'] + [f'"{c}"' for c in counts.keys()]
    values = [filename] + [counts[k] for k in counts]
    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            INSERT INTO euler_analysis ({', '.join(columns_sql)})
            VALUES ({', '.join(['?']*len(columns))})
        """, values)
        conn.commit()

def analyze_all_files(folder, db_path, items_ast, builtins_list, modules_to_track, special_math_funcs):
    """Analyse chaque fichier Python du dossier, insère dans la base"""
    create_db(db_path, FEATURES, BUILTINS, MODULES_TO_TRACK, SPECIAL_MATH_FUNCS)
    files = [f for f in os.listdir(folder) if f.endswith('.py')]
    for fname in files:
        path = os.path.join(folder, fname)
        counts = analyze_code_file(path, items_ast, builtins_list, modules_to_track, special_math_funcs)
        if counts:
            insert_analysis(fname, counts, db_path)
            print(f"[OK] {fname} analysé et inséré dans euler_analysis.")
        else:
            print(f"[WARN] {fname} ignoré (problème d'analyse).")

# -------------------------------
# EXTRACTION ET ANALYSE DES SNIPPETS (fonctions)
# -------------------------------

def extract_functions_from_file(filepath):
    """Pour chaque fonction d'un fichier, renvoie (node, code source exact)"""
    with open(filepath, encoding="utf-8") as f:
        code = f.read()
    tree = ast.parse(code)
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            try:
                snippet = ast.get_source_segment(code, node)
            except Exception:
                lines = code.splitlines()
                snippet = '\n'.join(lines[node.lineno-1: node.end_lineno])
            yield node, snippet

def classify_snippet(snippet_code, items_ast, builtins_list, modules_to_track, special_math_funcs):
    """Retourne un dict de compteurs pour un snippet de code (fonction)"""
    tree = ast.parse(snippet_code)
    counter = ModularFeatureCounter(items_ast, builtins_list, modules_to_track, special_math_funcs)
    counter.visit(tree)
    # Comme pour le fichier entier, initialiser les absents à 0
    all_cols = [f for f in FEATURES] \
            + [f'call_{b}' for b in BUILTINS] \
            + [f'call_math_{func}' for func in SPECIAL_MATH_FUNCS] \
            + [f'call_module_{mod.replace(".", "_")}' for mod in MODULES_TO_TRACK] \
            + ['call_operator', 'call_user_func', 'n_lines', 'n_chars']
    for col in all_cols:
        if col not in counter.counts:
            counter.counts[col] = 0
    counter.counts['n_lines'] = snippet_code.count('\n') + 1
    counter.counts['n_chars'] = len(snippet_code)
    return dict(counter.counts)

def insert_snippet_in_db(db_path, id_code_source, function_name, snippet_code, counts_dict):
    """Insère un snippet analysé dans la table 'snippets'"""
    columns = ['id_code_source', 'function_name', 'code'] + list(counts_dict.keys())
    # DEBUG des mots réservés SQL
    columns_sql = ['id_code_source', 'function_name', 'code'] + [f'"{c}"' for c in counts_dict.keys()]
    values = [id_code_source, function_name, snippet_code] + [counts_dict[k] for k in counts_dict]
    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            INSERT INTO snippets ({', '.join(columns_sql)})
            VALUES ({', '.join(['?']*len(columns))})
        """, values)
        conn.commit()

def analyze_all_snippets(db_path, folder, items_ast, builtins_list, modules_to_track, special_math_funcs):
    """
    Pour chaque fichier Python dans 'folder':
    - Cherche son id dans euler_analysis (par le nom de fichier)
    - Pour chaque fonction du fichier, classe le code extrait, et insère dans 'snippets'
    """
    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, filename FROM euler_analysis")
        file_map = {fname: fid for fid, fname in cur.fetchall()}
    for fname in os.listdir(folder):
        if not fname.endswith('.py'):
            continue
        if fname not in file_map:
            print(f"[WARN] Fichier {fname} non trouvé dans euler_analysis, ignoré")
            continue
        id_code_source = file_map[fname]
        fullpath = os.path.join(folder, fname)
        for node, snippet_code in extract_functions_from_file(fullpath):
            counts = classify_snippet(snippet_code, items_ast, builtins_list, modules_to_track, special_math_funcs)
            insert_snippet_in_db(db_path, id_code_source, node.name, snippet_code, counts)
            print(f"[OK] Snippet {node.name} extrait de {fname} (liée à id={id_code_source})")

# -------------------------------
# UTILISATION : à (dé)commenter selon l'étape souhaitée
# -------------------------------

if __name__ == "__main__":
    #1. Analyser tous les fichiers complets (à faire en premier !)
    # analyze_all_files(
    #    folder=FOLDER,
    #    db_path=DB_PATH,
    #    items_ast=ITEMS_AST,
    #    builtins_list=BUILTINS,
    #    modules_to_track=MODULES_TO_TRACK,
    #    special_math_funcs=SPECIAL_MATH_FUNCS
    # )

    # 2. Ensuite, analyser tous les snippets (fonctions) et les stocker avec les métriques
    # analyze_all_snippets(
    #    db_path=DB_PATH,
    #    folder=FOLDER,
    #    items_ast=ITEMS_AST,
    #    builtins_list=BUILTINS,
    #    modules_to_track=MODULES_TO_TRACK,
    #    special_math_funcs=SPECIAL_MATH_FUNCS
    # )

    # 3. pour (ré)initialiser la DB sans rien analyser :
    #create_db(DB_PATH, FEATURES, BUILTINS, MODULES_TO_TRACK, SPECIAL_MATH_FUNCS)




'''# LISTE D'EXCLUSION
ast.Raise,
ast.Assert,
ast.With,
ast.AsyncWith,
ast.ClassDef,
ast.Yield,
ast.YieldFrom,
ast.AsyncFunctionDef,
ast.Await,
ast.AsyncFor,
ast.AsyncWith,
ast.Try,
ast.TryExcept,
ast.TryFinally,
ast.Break,
ast.Continue,
ast.ExceptHandler,
ast.ClassDef,
ast.Global,
ast.Lambda,
ast.Dict,

# LISTE D'INCLUSION
ast.FunctionDef,
nested_funcDef
ast.Return,
ast.If,
nested_if,
ast.While,
nested_while,
ast.For,
nested_for,
ast.Import,
ast.ImportFrom,
ast.Assign,
ast.AnnAssign,
ast.AugAssign,
ast.Delete,
ast.orelse,
ast.BoolOp,
ast.BinOp,
ast.UnaryOp,
ast.Compare,
ast.Call,
ast.Name,
ast.Str,
ast.Num,
ast.List,
ast.ListComp,
ast.DictComp,
ast.SetComp,
ast.Tuple,
ast.Set'''